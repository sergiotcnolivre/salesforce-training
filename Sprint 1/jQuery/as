$(() => {
  // #1 - Test if jQuery is loaded
  console.log(`jQuery Loaded: ${isJqueryLoaded()}`);

  // #2 - Disable/enable the form submit button
  enableDisableButton()
  
  // #3 - Fix broken images automatically
  bindFixImageEvent();
  
  // #4 - Move one DIV element inside another using jQuery
  setDraggable();
  
  // #5 - Select values from a JSON object using jQuery
  selectValuesFromJson();
  
  // #6 - Distinguish between left and right mouse click with jQuery
  mouseDownEvent();
  
  // #7 - How to detect whether the user has pressed 'Enter Key' using jQuery
  // #8 - Detect tab pressed button, check if tab button is pressed and the focused element is link, then underline it, if focused element is image, outline it
  keyboardEvents();
  
  // #9 - Implement form validation using regular expression with jQuery
  // #10 - Submit the form using Ajax jQuery and print the form values in separated newly created div
  formSubmitEvent()
  
  // #11 - Create 3 jQuery dialogs on 3 different buttons click but only 1 should be displayed at once
  activeDialogs()
  
  // #12 - Set the focus to the first input box
  setFirstInputFocus()
  
  // #13 - Alert currently focused element
  getCurrentlyFocusedElement()
  
  // #14 - Set background color of an element when the element (or any elements inside it) gets focus or loses focus 15. Display the tag's name on click
  modifyElementStylesOnFocus()
  
  // #15 - Double click on paragraph to toggle background color
  changeBackgroundColorOnDoubleClick()
  
  // #16 - Count the number of specific elements
  countNumberSpecificElements()
  
  // #17 - Show texts when mouseup and mousedown event triggering
  showAndHideTextOnClickEvent()
  
  // #18 - Write jQuery code to append a div element (and all of its contents) dynamically to the body element. Insert "<div><h1>JQuery Core</h1></div>" within HTML <body> tag
  apppendElementToBody();
  
  // #19 - Insert encrypted username password in session and cookies. Now display these values on each page header in decrypted format

});

function isJqueryLoaded() {
  return !!jQuery;
}

function selectValuesFromJson() {
  const jsonPokedex = [{
    "id": 1,
    "name": "Bulbasaur"
  },
  {
    "id": 2,
    "name": "Ivysaur"
  },
  {
    "id": 3,
    "name": "Venusaur"
  },
  {
    "id": 4,
    "name": "Charmander"
  },
  {
    "id": 5,
    "name": "Charmeleon"
  }];
  
  $.each(jsonPokedex, function(index, pokemon) {
    $('#pokedex-ex-5').append(`<li>id: ${pokemon.id} | name: ${pokemon.name}</li>`)    
  })
}

function enableDisableButton() {
  const submitButton = $('#submit-button');
  // disable
  submitButton.prop('disabled', true);
  // enable
  submitButton.prop('disabled', false);
}

function setDraggable() {
  $('#draggable').draggable({ containment: '#draggable-container' });
}

function mouseDownEvent() {
  $(window).mousedown((evt) => {
    const mouseButtons = [
      () => console.log('left click'),
      () => console.log('scroll click'),
      () => console.log('right click'),
    ]
    
    if(evt.which - 1 < 0 || evt.which - 1 > mouseButtons.length - 1) return;
    
    mouseButtons[evt.which - 1]();
  })
}

function keyboardEvents() {
  $(window).keydown((evt) => {
    // #7 - How to detect whether the user has pressed 'Enter Key' using jQuery
    if (evt.code === 'Enter' || evt.code === 'NumpadEnter')
      console.log('User has pressed Enter Key');
    
    // #8 - Detect tab pressed button
    if (evt.code === 'Tab'){
      console.log('User has pressed Tab Key')
    }
  })
}

function formSubmitEvent() {
  $('#form').submit((evt) => {
    evt.preventDefault();

    const validation = $('#form').validateForm([
      {
        id: 'name',
        required: true,
        requiredMessage: 'É obrigatório informar seu nome',
        errorMessage: 'O nome deve conter no mínimo 4 dígitos',
        validateCallback: name => name.length >= 4
      },
      {
        id: 'email',
        required: true,
        requiredMessage: 'É obrigatório informar um e-mail',
        errorMessage: 'Insira um e-mail válido',
        validateCallback(email) {
          const regexValidation = /^([_\-\.0-9a-zA-Z]+)@([_\-\.0-9a-zA-Z]+)\.([a-zA-Z]){2,7}$/;
          return regexValidation.test(email);
        }
      },
      {
        id: 'pass',
        required: true,
        requiredMessage: 'É obrigatório informar uma senha',
        errorMessage: 'A senha deve conter no mínimo 6 dígitos',
        validateCallback: password => password.length >= 6
      },
    ]);
    
    if(!validation) {
      alert('Form is not valid');
      return;
    }
    
    const formData = $('#form')
      .serializeArray()
      .reduce((accumulator, current) => {
        accumulator[current.name] = current.value;
        return accumulator;
      }, {});
    
    // $.ajax({
    //   method: 'POST',
    //   url: '',
    //   data: formData
    // })
    //   .catch(console.log)
    //   .done(console.log);
    
    const newProfileContainer = $('<div class="test-form"></div>')
    $('.new-profile-container').append(newProfileContainer);
    $.each(formData, (index, value) => {
      $(newProfileContainer).append(`
        <div>
          <strong>${index}</strong>
          <span>${value}</span>
        </div>
      `);
    });
  });
}

$.fn.validateForm = (validationFields) => {
  resetErrors();
  const validations = $.map(validationFields, function(field, index) {
    const inputField = $(`#${field.id}`);
    
    if(!inputField) return true;
    
    const inputValue = inputField.val();
    
    if(!inputValue && field.required) {
      setErrors({
        jqElement: inputField, 
        message: field.requiredMessage
      });
      return false;
    }
    
    const isValidValue = field.validateCallback(inputValue);
    
    if(!isValidValue) {
      setErrors({
        jqElement: inputField,
        message: field.errorMessage
      });
      return false;
    }
  })
  
  return validations.every(Boolean);
  
  function setErrors({jqElement, message}) {
    jqElement.addClass('input-with-error');
    jqElement.parent().append(`<div class="error-message">${message}</div>`);
  }
  
  function resetErrors() {
    $('.input-with-error').removeClass('input-with-error');
    $('.error-message').remove();
  }
}

function activeDialogs() {
  const modalEffect = {
    effect: "fade",
    duration: 300
  };
  const modalConfigs = {
    autoOpen: false,
    show: modalEffect,
    hide: modalEffect
  };
  
  $.each([
    { modalId: 'dialog-1', btnModalId: 'button-dialog-1'}, 
    { modalId: 'dialog-2', btnModalId: 'button-dialog-2'},
    { modalId: 'dialog-3', btnModalId: 'button-dialog-3'}
  ], (index, modalInfos) => {
    $(`#${modalInfos.modalId}`).dialog(modalConfigs);
 
    $(`#${modalInfos.btnModalId}`).on('click', function() {
      $(`.dialog`).dialog('close');
      $(`#${modalInfos.modalId}`).dialog('open');
    });
  })
}

function bindFixImageEvent() {
  $('#image-to-fix').bind('error', function(evt) {
    //console.log(evt);
    $('#image-to-fix').attr('src', 'https://png.pngtree.com/png-vector/20210604/ourmid/pngtree-gray-network-placeholder-png-image_3416659.jpg')
  }) 
}

function setFirstInputFocus() {
  $('input')[0].focus();
}
 
function getCurrentlyFocusedElement() {
  const focusedElement = $(':focus')
   
  if(!focusedElement) return;
  
  console.log(`Elemento focado: ${focusedElement.prop('tagName')}`)
}

function getCurrentlyFocusedElement() {
  const focusedElement = $(':focus')
   
  if(!focusedElement) return;
  
  console.log(`Elemento focado: ${focusedElement.prop('tagName')}`)
}

function modifyElementStylesOnFocus() {
  $('input').focusin(function() {
    console.log($(this).prop('tagName'));
    $(this).css('background-color', '#ccc');
  });
  
  $('input').focusout(function() {
    $(this).css('background-color', 'initial');
  })
}

function countNumberSpecificElements() {
  console.log($('input').length)
}

function showAndHideTextOnClickEvent() {
  $('.container-click-trigger').mousedown(function() {
    $('.container-click-trigger > span').show();
  });
  
  $('.container-click-trigger').mouseup(function() {
    $('.container-click-trigger > span').hide();
  })
}

function apppendElementToBody() {
  $('body').append('<div><h1>JQuery Core</h1></div>');
}

function changeBackgroundColorOnDoubleClick() {
$('.paragraph-change-color').dblclick(() => {
    $('.paragraph-change-color').css('background-color', getRandomColor());
})
function getRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
}

}